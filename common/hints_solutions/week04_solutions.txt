###week04_ex0
People can only die once, so it is likely that there will be fewer older people than younger ones.

Many societies have a growing young population when the average numbers of children per woman is greater than 2
###week04_ex0_end

###week04_ex1
plt.hist(diabetes['Age'], bins=[18, 25, 35, 45, 55, 65, 75])
plt.xlabel('Age') # Make the meaning of the data clear
plt.ylabel('Frequency') # Make the meaning of the data clear
plt.title('Distribution of ages of female patients') # Make the meaning of the data clear
###week04_ex1_end

###week04_ex2
diabetes_true = diabetes[diabetes['Outcome'] == 1]
diabetes_false = diabetes[diabetes['Outcome'] == 0]

# Make the data accessible: If this is saved as a PDF it will be 6ins wide. If then placed in a doc with text width
# of 6ins it won't be shrunk or expanded => the font size would be unchanged that specified
# in matplotlib
fig, (ax1, ax2) = plt.subplots(1, 2, figsize = (6, 3)) 
bins = np.arange(-0.5, 70.5, 2) # Show the data by using plots with the same scale
ylim = [0, 60] # Show the data by using plots with the same scale
ax1.hist(diabetes_true['BMI'], bins)
ax1.set_xlabel('BMI')
ax1.set_ylabel('Fequency')
ax1.set_title('Diabetes')
ax1.set_ylim(ylim)
ax2.hist(diabetes_false['BMI'], bins)
ax2.set_xlabel('BMI')
ax2.set_ylabel('')
ax2.set_title('No diabetes')
ax1.set_ylim(ylim)
###week04_ex2_end

###week04_ex3
n_patients = len(diabetes_true['BMI']) #268 patients, thus the median is the average of the 134th and 135th value (in a sorted list) 
diabetes_sorted = diabetes_true.sort_values(by='BMI')['BMI']
median = (diabetes_sorted.iloc[int(n_patients/2)]+diabetes_sorted.iloc[int(n_patients/2)-1])/2 # Remember that the first entry is 0 not 1, thus we need to take the value at 133th and 134th position
lower_half = diabetes_sorted[0:134]
upper_half = diabetes_sorted[134:]
lower_quartile = (lower_half.iloc[int(n_patients/4)]+lower_half.iloc[int(n_patients/4)-1])/2 
upper_quartile = (upper_half.iloc[int(n_patients/4)-1]+upper_half.iloc[int(n_patients/4)])/2
inter_quartile_range = upper_quartile - lower_quartile
mean = diabetes_sorted.sum()/n_patients
squared_diff = (diabetes_sorted-mean)**2
std= math.sqrt(squared_diff.sum()/(n_patients-1))
print(lower_quartile, upper_quartile, inter_quartile_range, median, mean, std)

# b
print(diabetes_true['BMI'].quantile(0.25), diabetes_true['BMI'].quantile(0.75), diabetes_true['BMI'].quantile(0.75) - diabetes_true['BMI'].quantile(0.25), diabetes_true['BMI'].median(), diabetes_true['BMI'].mean(), diabetes_true['BMI'].std())
###week04_ex3_end

###week04_ex4
plt.boxplot(bmi, labels=['Patients diagnosed with diabetes', 'Patients not diagnosed with diabetes'])
plt.ylabel('BMI')
plt.title('BMI of female patients with and without diabetes')
plt.xticks(rotation=-15)
###week04_ex4_end

###week04_ex5
# a
bmi_pregnancy_diabetes_true = []
bmi_pregnancy_diabetes_false = []
for i in range(11):
    bmi_pregnancy_diabetes_true.append(diabetes_true[diabetes_true['Pregnancies'] == i]['BMI'])
    bmi_pregnancy_diabetes_false.append(diabetes_false[diabetes_false['Pregnancies'] == i]['BMI'])
bmi_pregnancy_diabetes_true.append(diabetes_true[diabetes_true['Pregnancies'] >= 11]['BMI'])
bmi_pregnancy_diabetes_false.append(diabetes_false[diabetes_false['Pregnancies'] >= 11]['BMI'])

#b
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(6, 4))
ax1.boxplot(bmi_pregnancy_diabetes_true, labels=['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11+'])
ax1.set_xlabel('Number of pregnancies')
ax1.set_title('Diagnosed with diabetes')
ax1.set_ylabel('BMI')
ax1.tick_params(labelsize=8) # Accessibility: minimum font size and prevents text overlaps
ax2.boxplot(bmi_pregnancy_diabetes_false, labels=['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11+'])
ax2.set_xlabel('Number of pregnancies')
ax2.set_title('Not diagnosed with diabetes')
ax1.tick_params(labelsize=8) # Accessibility: minimum font size and prevents text overlaps
# ax2.set_ylabel('BMI') # Don't need this, since it's obvious from the scale
ax2.set_ylim([0, 70]) # Show the data: same scale allows for comparisons
plt.tight_layout()
plt.show()

#c
# It doesn't seem to have an effect
###week04_ex5_end

###week04_ex6
colours = ['#d73027','#fc8d59','#fee090','#e0f3f8','#91bfdb','#4575b4']

# Your code
# a
drinks_by_country_loc = os.path.join(os.getcwd(), 'datasets', 'drinks_by_country.csv')
drinks_by_country = pd.read_csv(drinks_by_country_loc)

# b
co2_vs_gdp_by_continent = pd.merge(co2_vs_gdp, drinks_by_country, left_on=['Entity'],right_on=['Country'], how='inner')

# You can skip to (c) at this point, since the exercise is really about visualisation.
# However, the rest of this part of the solution to (b) shows you how to deal with
# mismatch between values of categorical variables when merging.

# Note that co2_vs_gdp_by_continent has fewer rows than co2_vs_gdp
print('# rows in drinks_by_country: %d; # rows in co2_vs_gdp: %d; # rows in co2_vs_gdp_by_continent: %d'%(len(drinks_by_country), len(co2_vs_gdp), len(co2_vs_gdp_by_continent)))
# This implises that the Entity and country names do not all match.
# We can see which ones in co2_vs_gdp, but not in drinks_by_country like this:
set(co2_vs_gdp['Entity']) - set(drinks_by_country['Country'])
# Now we can see what the full list of country names is in drinks_by_country, and work out
# what we should rename them to so that they have the same name co2_vs_gdp.
', '.join(drinks_by_country['Country'])
# OK, it looks like we can make the following substitutions and merge again - there still will be on
# country fewer in the co2_vs_gdp_by_continent data frame than in the co2_vs_gdp data frame
drinks_by_country2 = drinks_by_country
drinks_by_country2['Country'].replace({'USA': 'United States',
                                          'DR Congo': 'Democratic Republic of Congo',
                                          'Russian Federation': 'Russia'}, inplace=True)

co2_vs_gdp_by_continent = pd.merge(co2_vs_gdp, drinks_by_country2, left_on=['Entity'],right_on=['Country'], how='inner')
## Note that co2_vs_gdp_by_continent has fewer rows than co2_vs_gdp
print('# rows in drinks_by_country: %d; # rows in co2_vs_gdp: %d; # rows in co2_vs_gdp_by_continent: %d'%(len(drinks_by_country), len(co2_vs_gdp), len(co2_vs_gdp_by_continent)))
# c
continents = pd.unique(co2_vs_gdp_by_continent['Continent'])

plt.figure(figsize=(15,10))
# Note: to fit this into a report, we'd need plt.figure(figsize=(6,4)), which would mean we'd need to fix
# overlapping labels. plt.tight_layout() could help, a bit, but we might need to 

for i in range(len(continents)):
    co2_vs_gdp_by_single_continent = co2_vs_gdp_by_continent[co2_vs_gdp_by_continent['Continent'] == continents[i]]
    scatter = plt.scatter(co2_vs_gdp_by_single_continent['GDP per capita (international-$ (in 2011 prices))'],
                co2_vs_gdp_by_single_continent['CO₂ emissions per capita (tonnes per capita)'],
                c=colours[i],
                s=co2_vs_gdp_by_single_continent['Total population (Gapminder)']/1e6,
                edgecolors='k')
plt.xlabel('GDP per capita (international-$ (in 2011 prices))')
plt.ylabel('CO₂ emissions per capita (tonnes per capita)')
plt.xscale('log')
# d
lgnd = plt.legend(loc="upper left", labels=continents)
# d*
for i in range(len(continents)):
    lgnd.legendHandles[i]._sizes = [50]

# e
largest_population = co2_vs_gdp_by_continent[co2_vs_gdp_by_continent['Total population (Gapminder)'] == max(co2_vs_gdp_by_continent['Total population (Gapminder)'])].iloc[0]['Entity']
highest_gdp = co2_vs_gdp_by_continent[co2_vs_gdp_by_continent['GDP per capita (international-$ (in 2011 prices))'] == max(co2_vs_gdp_by_continent['GDP per capita (international-$ (in 2011 prices))'])].iloc[0]['Entity']
lowest_gdp  = co2_vs_gdp_by_continent[co2_vs_gdp_by_continent['GDP per capita (international-$ (in 2011 prices))'] == min(co2_vs_gdp_by_continent['GDP per capita (international-$ (in 2011 prices))'])].iloc[0]['Entity']
highest_co2 = co2_vs_gdp_by_continent[co2_vs_gdp_by_continent['CO₂ emissions per capita (tonnes per capita)'] == max(co2_vs_gdp_by_continent['CO₂ emissions per capita (tonnes per capita)'])].iloc[0]['Entity']

# f
# One country from each continent
countries = [co2_vs_gdp_by_continent[co2_vs_gdp_by_continent['Continent'] == continent].iloc[-1]['Entity'] for continent in continents]

countries.append(largest_population)
countries.append(highest_gdp)
countries.append(lowest_gdp)
countries.append(highest_co2)

for i in range(len(countries)):
    plt.annotate(countries[i], # this is the text
                 (co2_vs_gdp_by_continent[co2_vs_gdp_by_continent['Entity'] == countries[i]]['GDP per capita (international-$ (in 2011 prices))'],co2_vs_gdp_by_continent[co2_vs_gdp_by_continent['Entity'] == countries[i]]['CO₂ emissions per capita (tonnes per capita)']), # this is the point to label
                 ha='center') # horizontal alignment can be left, right or center
###week04_ex6_end

###week04_ex7
# Your code
fig, ((ax1, ax2),(ax3,ax4)) = plt.subplots(2,2, figsize = (15,15))

# Note: this looks OK in a Jupyter notebook. To put into a report with legible font sizes,
# ideally we'd use plt.figure(figsize=(6,6)), which would mean we'd need 
# to fix problems with overlapping labels and axis names. "plt.tight_layout()" right at the end
# would help a bit. We might also be able to reduce the fontsize to
# 8pt like this:
# import matplotlib
# matplotlib.rcParams['font.size'] = 8
# But there would still be other tweaks required to make the plots look really good

# First plot

ax1.plot(annual_co2_africa['Year'], annual_co2_africa['Annual CO₂ emissions (tonnes )']/1e9, '#543005')
ax1.plot(annual_co2_asia['Year'], annual_co2_asia['Annual CO₂ emissions (tonnes )']/1e9, '#8c510a')
ax1.plot(annual_co2_americas['Year'], annual_co2_americas['Annual CO₂ emissions (tonnes )']/1e9, '#bf812d')
ax1.plot(annual_co2_eu28['Year'], annual_co2_eu28['Annual CO₂ emissions (tonnes )']/1e9, '#dfc27d')
ax1.plot(annual_co2_europe['Year'], annual_co2_europe['Annual CO₂ emissions (tonnes )']/1e9, '#f6e8c3')
ax1.plot(annual_co2_china['Year'], annual_co2_china['Annual CO₂ emissions (tonnes )']/1e9, '#c7eae5')
ax1.plot(annual_co2_india['Year'], annual_co2_india['Annual CO₂ emissions (tonnes )']/1e9, '#80cdc1')
ax1.plot(annual_co2_us['Year'], annual_co2_us['Annual CO₂ emissions (tonnes )']/1e9, '#35978f')
ax1.plot(annual_co2_middleeast['Year'], annual_co2_middleeast['Annual CO₂ emissions (tonnes )']/1e9, '#01665e')
ax1.plot(annual_co2_international['Year'], annual_co2_international['Annual CO₂ emissions (tonnes )']/1e9, '#003c30')
ax1.set_xlabel('Year')
ax1.set_ylabel('Annual $CO_2$ emissions (billion tonnes) from 1900-2017')
ax1.set_title('Annual $CO_2$ emissions (billion tonnes) from 1900-2017')
ax1.legend(['Africa', 'Asia','Americas', 'EU28', 'Europe(other)', 'China', 'India', 'US', 'Middle East', 'International Transport'])

# Second plot

ax2.stackplot(annual_co2_africa['Year'], # x value
              annual_co2_africa['Annual CO₂ emissions (tonnes )']/1e9, # y1 value  
              annual_co2_asia['Annual CO₂ emissions (tonnes )']/1e9,  # y2 value ...
              annual_co2_americas['Annual CO₂ emissions (tonnes )']/1e9, 
              annual_co2_eu28['Annual CO₂ emissions (tonnes )']/1e9, 
              annual_co2_europe['Annual CO₂ emissions (tonnes )']/1e9,
              annual_co2_china['Annual CO₂ emissions (tonnes )']/1e9,
              annual_co2_india['Annual CO₂ emissions (tonnes )']/1e9,
              annual_co2_us['Annual CO₂ emissions (tonnes )']/1e9,
              annual_co2_middleeast['Annual CO₂ emissions (tonnes )']/1e9,
              annual_co2_international['Annual CO₂ emissions (tonnes )']/1e9, colors=['#543005','#8c510a','#bf812d','#dfc27d','#f6e8c3','#c7eae5','#80cdc1','#35978f','#01665e','#003c30'])
ax2.legend(['Africa', 'Asia','Americas', 'EU28', 'Europe(other)', 'China', 'India', 'US', 'Middle East', 'International Transport'], loc='upper left')
ax2.set_xlabel('Year')
ax2.set_title('Annual $CO_2$ emissions from 1900-2017')
ax2.set_ylabel('Annual $CO_2$ emissions (billion tonnes) from 1900-2017')

#Third plot

ax3.bar(region, co2_emissions, color=['grey', 'grey', 'grey', 'grey', 'grey', 'grey', 'grey', 'red', 'red'])
ax3.set_xticks(region)
ax3.set_xticklabels(region, rotation=45, ha='right')
ax3.set_ylabel('Cumulative CO₂ emissions by region (billion tonnes) from 1900-2017')
ax3.set_title('Cumulative $CO_2$ emissions from 1900-2017')

# Fourth plot

for i in range(len(continents)):
    co2_vs_gdp_by_single_continent = co2_vs_gdp_by_continent[co2_vs_gdp_by_continent['Continent'] == continents[i]]
    scatter = ax4.scatter(co2_vs_gdp_by_single_continent['GDP per capita (international-$ (in 2011 prices))'],
                co2_vs_gdp_by_single_continent['CO₂ emissions per capita (tonnes per capita)'],
                c=colours[i],
                s=co2_vs_gdp_by_single_continent['Total population (Gapminder)']/1e6,
                edgecolors='k')
ax4.set_xlabel('GDP per capita (international-$ (in 2011 prices))')
ax4.set_ylabel('CO₂ emissions per capita (tonnes per capita)')
ax4.set_title('CO₂ emissions per capita')

ax4.set_xscale('log')
lgnd = ax4.legend(loc="upper left", labels=continents)
for i in range(len(continents)):
    lgnd.legendHandles[i]._sizes = [50]

largest_population = co2_vs_gdp_by_continent[co2_vs_gdp_by_continent['Total population (Gapminder)'] == max(co2_vs_gdp_by_continent['Total population (Gapminder)'])].iloc[0]['Entity']
highest_gdp = co2_vs_gdp_by_continent[co2_vs_gdp_by_continent['GDP per capita (international-$ (in 2011 prices))'] == max(co2_vs_gdp_by_continent['GDP per capita (international-$ (in 2011 prices))'])].iloc[0]['Entity']
lowest_gdp  = co2_vs_gdp_by_continent[co2_vs_gdp_by_continent['GDP per capita (international-$ (in 2011 prices))'] == min(co2_vs_gdp_by_continent['GDP per capita (international-$ (in 2011 prices))'])].iloc[0]['Entity']
highest_co2 = co2_vs_gdp_by_continent[co2_vs_gdp_by_continent['CO₂ emissions per capita (tonnes per capita)'] == max(co2_vs_gdp_by_continent['CO₂ emissions per capita (tonnes per capita)'])].iloc[0]['Entity']
countries = [co2_vs_gdp_by_continent[co2_vs_gdp_by_continent['Continent'] == continent].iloc[-1]['Entity'] for continent in continents]
countries.append(largest_population)
countries.append(highest_gdp)
countries.append(lowest_gdp)
countries.append(highest_co2)

for i in range(len(countries)):
    ax4.annotate(countries[i], # this is the text
                 (co2_vs_gdp_by_continent[co2_vs_gdp_by_continent['Entity'] == countries[i]]['GDP per capita (international-$ (in 2011 prices))'],co2_vs_gdp_by_continent[co2_vs_gdp_by_continent['Entity'] == countries[i]]['CO₂ emissions per capita (tonnes per capita)']), # this is the point to label
                 ha='center') # horizontal alignment can be left, right or center
    
fig.savefig("CO2_emissions.png")
###week04_ex7_end